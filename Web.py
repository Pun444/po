import streamlit as st
import numpy as np
import librosa
import tensorflow as tf
from tensorflow.keras.models import load_model

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÑ‡∏ß‡πâ
model = load_model('C:/Dataset/Lung/gunnet.h5')

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
disease_info = {
    "bron": {"description": "‡∏´‡∏•‡∏≠‡∏î‡∏•‡∏°‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å", "care": "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏±‡∏ô‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà"},
    "n": {"description": "‡∏õ‡∏≠‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à", "care": "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏•‡∏û‡∏¥‡∏©"},
    "copd": {"description": "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≠‡∏î‡∏≠‡∏∏‡∏î‡∏Å‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢", "care": "‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤ ‡πÜ"},
    "heart failure": {"description": "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏¢‡πÉ‡∏à", "care": "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏û‡∏ó‡∏¢‡πå"},
    "lung fibrosis": {"description": "‡∏õ‡∏≠‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏ï‡∏±‡∏ß ‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à", "care": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ù‡∏∏‡πà‡∏ô‡∏•‡∏∞‡∏≠‡∏≠‡∏á"},
    "pneumonia": {"description": "‡∏õ‡∏≠‡∏î‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÇ‡∏£‡∏Ñ", "care": "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‡πÜ ‡πÅ‡∏•‡∏∞‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"},
    "asthma": {"description": "‡πÇ‡∏£‡∏Ñ‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î", "care": "‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ‡πÅ‡∏•‡∏∞‡∏û‡∏Å‡∏¢‡∏≤‡∏û‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡∏ß"},
    "pleural effusion": {"description": "‡∏†‡∏≤‡∏ß‡∏∞‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏õ‡∏≠‡∏î ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å", "care": "‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡πÄ‡∏´‡∏ï‡∏∏"}
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏≠‡∏î
def predict_disease(audio_file):
    audio_data, sr = librosa.load(audio_file, sr=None)
    target_length = 91875
    audio_data = librosa.util.fix_length(audio_data, size=target_length)
    
    def augment_audio(audio_data, sr, target_length=91875):
        audio_data_stretch = librosa.effects.time_stretch(audio_data, rate=1.2)
        audio_data_stretch = librosa.util.fix_length(audio_data_stretch, size=target_length)
        
        audio_data_shift = librosa.effects.pitch_shift(audio_data, sr=sr, n_steps=2)
        audio_data_shift = librosa.util.fix_length(audio_data_shift, size=target_length)
        
        noise = np.random.normal(0, 0.1, size=target_length)
        audio_data_noise = librosa.util.fix_length(audio_data, size=target_length) + noise
        
        X_augmented = np.array([audio_data, audio_data_stretch, audio_data_shift, audio_data_noise])
        return X_augmented
    
    X_augmented = augment_audio(audio_data, sr, target_length=target_length)
    X_input = np.array([X_augmented[0]])
    prediction = model.predict(X_input)
    
    class_names = ['bron', 'n', 'copd', 'heart failure', 'lung fibrosis', 'pneumonia', 'asthma', 'pleural effusion']
    predicted_class = class_names[np.argmax(prediction)]
    return predicted_class

# UI Streamlit
st.set_page_config(page_title="‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏≠‡∏î", page_icon="ü´Å", layout="centered")
st.image("https://www.scripps.edu/_files/images/news-and-events/large-release-images/2024/20240410-schultz-bollong-lung-regeneration-920x500.jpg", width=1000)

st.title('‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏≠‡∏î')
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πÄ‡∏ï‡πÇ‡∏ò‡∏™‡πÇ‡∏Ñ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≠‡∏î")

uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö WAV)", type=["wav"])

if uploaded_file is not None:
    st.audio(uploaded_file, format='audio/wav')
    prediction = predict_disease(uploaded_file)
    st.success(f"‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ: **{prediction}**")
    
    if prediction in disease_info:
        st.subheader("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ")
        st.write(f"**‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:** {disease_info[prediction]['description']}")
        st.write(f"**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {disease_info[prediction]['care']}")

st.sidebar.title("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
st.sidebar.write("- ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢")